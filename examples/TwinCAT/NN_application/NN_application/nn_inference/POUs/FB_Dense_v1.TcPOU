<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Dense_v1" Id="{dee00fe7-075f-4690-b57a-5a2cad115b81}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_Dense_v1
VAR_INPUT
	pointer_input: POINTER TO LREAL;
	pointer_output : POINTER TO LREAL;
	
END_VAR
VAR	
  i : UINT;
  flag_AreWeightsLoaded : BOOL := FALSE;
  flag_AreWeightsChecked : BOOL := FALSE;
  load_weights : FB_LoadWeights;
  filePath : T_MaxString := 'c:\Users\Administrator\Documents\git-projekte\keras2plc\examples\Python\test_ST_files\Dense_v1_weights.dat';
  nn : Dense_v1_Layers;
  hash_sha_256_twincat : ARRAY[0..3] OF LREAL;
  compare_res : DINT := 99;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF NOT flag_AreWeightsLoaded THEN
		load_weights(execute := TRUE,filePath := filePath,ReadAdr := ADR(nn.weights), ReadLen :=  SIZEOF(nn.weights));
		IF NOT load_weights.busy THEN 
			flag_AreWeightsLoaded := TRUE;
		END_IF
ELSIF NOT flag_AreWeightsChecked THEN
	F_GenerateHashValue(hashMode:=E_HashMode.HASH_SHA256,pData := ADR(nn.weights),nData := SIZEOF(nn.weights)-32,pHash := ADR(hash_sha_256_twincat),nHash:=32);
	compare_res := MEMCMp(pBuf1 := ADR(hash_sha_256_twincat),ADR(nn.weights.hash_sha_256),32);
	IF compare_res = 0 THEN
		flag_AreWeightsChecked := TRUE;
	END_IF
ELSE
	MEMCPY(destAddr:=ADR(nn.layer_input),srcAddr:=pointer_input,n:=SIZEOF(LREAL)*nn.layers[0].num_neurons);

    
   // forward inference
	FOR i := 0 TO nn.num_layers-2 DO
		F_ForwardPropagation(	layer_pre	:= 	nn.layers[i],
								layer_next	:=	nn.layers[i+1],
								pointer_in 	:=	ADR(nn.layer_input),
								pointer_out	:=	ADR(nn.layer_output)	);
		MEMCPY(destAddr:=ADR(nn.layer_input),srcAddr:=ADR(nn.layer_output),n:=SIZEOF(LREAL)*nn.layers[i+1].num_neurons);
	END_FOR
	MEMCPY(destAddr:=pointer_output,srcAddr:=ADR(nn.layer_output),n:=SIZEOF(LREAL)*nn.layers[SIZEOF(nn.layers)/SIZEOF(nn.layers[0])-1].num_neurons);
    
    // output denormalization
    F_NormalizationLayer(pointer_input := pointer_output,pointer_mean := ADR(nn.weights.denormalization_mean),
    pointer_std := ADR(nn.weights.denormalization_std),invert := TRUE, num_neurons := nn.layers[SIZEOF(nn.layers)/SIZEOF(nn.layers[0])-1].num_neurons);    
END_IF

]]></ST>
    </Implementation>
    <LineIds Name="FB_Dense_v1">
      <LineId Id="3" Count="30" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>